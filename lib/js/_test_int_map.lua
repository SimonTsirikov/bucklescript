-- Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
__console = {log = print};

__Map = require "map";
Caml_primitive = require "caml_primitive";

compare = Caml_primitive.caml_int_compare;

include = __Map.Make({
      compare = compare
    });

empty = include.empty;

is_empty = include.is_empty;

mem = include.mem;

add = include.add;

update = include.update;

singleton = include.singleton;

remove = include.remove;

merge = include.merge;

union = include.union;

compare_1 = include.compare;

equal = include.equal;

iter = include.iter;

fold = include.fold;

for_all = include.for_all;

exists = include.exists;

filter = include.filter;

partition = include.partition;

cardinal = include.cardinal;

bindings = include.bindings;

min_binding = include.min_binding;

min_binding_opt = include.min_binding_opt;

max_binding = include.max_binding;

max_binding_opt = include.max_binding_opt;

choose = include.choose;

choose_opt = include.choose_opt;

split = include.split;

find = include.find;

find_opt = include.find_opt;

find_first = include.find_first;

find_first_opt = include.find_first_opt;

find_last = include.find_last;

find_last_opt = include.find_last_opt;

map = include.map;

mapi = include.mapi;

exports = {};
exports.empty = empty;
exports.is_empty = is_empty;
exports.mem = mem;
exports.add = add;
exports.update = update;
exports.singleton = singleton;
exports.remove = remove;
exports.merge = merge;
exports.union = union;
exports.compare = compare_1;
exports.equal = equal;
exports.iter = iter;
exports.fold = fold;
exports.for_all = for_all;
exports.exists = exists;
exports.filter = filter;
exports.partition = partition;
exports.cardinal = cardinal;
exports.bindings = bindings;
exports.min_binding = min_binding;
exports.min_binding_opt = min_binding_opt;
exports.max_binding = max_binding;
exports.max_binding_opt = max_binding_opt;
exports.choose = choose;
exports.choose_opt = choose_opt;
exports.split = split;
exports.find = find;
exports.find_opt = find_opt;
exports.find_first = find_first;
exports.find_first_opt = find_first_opt;
exports.find_last = find_last;
exports.find_last_opt = find_last_opt;
exports.map = map;
exports.mapi = mapi;
return exports;
--[[ include Not a pure module ]]
